// Code generated by protoc-gen-yimi-errors. DO NOT EDIT.
// versions:
// 	protoc-gen-yimi-errors 6472e32
// 	protoc                 (unknown)

package error_enum

import (
	fmt "fmt"
	errors "github.com/yimi-go/errors"
	code "google.golang.org/genproto/googleapis/rpc/code"
	codes "google.golang.org/grpc/codes"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the errors package it is being compiled against.
const _ = errors.SupportPackageIsVersion1

func IsZero(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == Enum_ZERO.String() && e.Code == code.Code_CANCELLED
}

func ErrorZero(format string, args ...interface{}) *errors.Error {
	return errors.New(codes.Canceled, Enum_ZERO.String(), fmt.Sprintf(format, args...))
}

func IsOne(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == Enum_ONE.String() && e.Code == code.Code_UNIMPLEMENTED
}

func ErrorOne(format string, args ...interface{}) *errors.Error {
	return errors.New(codes.Unimplemented, Enum_ONE.String(), fmt.Sprintf(format, args...))
}

func IsTwo(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == Enum_TWO.String() && e.Code == code.Code_DEADLINE_EXCEEDED
}

func ErrorTwo(format string, args ...interface{}) *errors.Error {
	return errors.New(codes.DeadlineExceeded, Enum_TWO.String(), fmt.Sprintf(format, args...))
}
